// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// Core Configuration Tables
// ============================================================================

model Site {
  id          String   @id @default(cuid())
  code        String   @unique // e.g., "ALASLA-29"
  name        String
  location    String?
  timezone    String   @default("UTC")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  productions         Production[]
  dispatches          Dispatch[]
  receivedMaterials   ReceivedMaterial[]
  equipmentLogs       EquipmentLog[]
  manpowerLogs        ManpowerLog[]
  inventorySnapshots  InventorySnapshot[]
  exportJobs          ExportJob[]
  exportAudits        ExportAudit[]

  @@map("sites")
}

model Material {
  id          String  @id // Maps to MATERIALS constant IDs
  code        String  @unique
  type        String
  name        String
  category    String  // MaterialCategory enum
  uom         String  // UOM enum
  isFinal     Boolean
  notes       String?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  productions         Production[]
  dispatches          Dispatch[]
  receivedMaterials   ReceivedMaterial[]
  inventorySnapshots  InventorySnapshot[]

  @@map("materials")
}

model Equipment {
  id        String  @id // Maps to EQUIPMENT constant IDs
  code      String  @unique
  name      String
  type      String  // EquipmentType enum
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  equipmentLogs EquipmentLog[]

  @@map("equipment")
}

model ManpowerRole {
  id        String  @id
  code      String  @unique // Maps to ROLES constant codes
  name      String
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  manpowerLogs ManpowerLog[]

  @@map("manpower_roles")
}

// ============================================================================
// Operational Data Tables
// ============================================================================

model Production {
  id          String   @id @default(cuid())
  siteId      String
  date        DateTime @db.Date
  shift       String?  // ShiftType enum
  materialId  String
  qtyTon      Decimal  @db.Decimal(12, 3)
  operation   String   // OperationType enum
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?  // User ID from Clerk

  // Relations
  site     Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  material Material @relation(fields: [materialId], references: [id])

  @@unique([siteId, date, materialId, operation])
  @@map("production")
}

model Dispatch {
  id          String   @id @default(cuid())
  siteId      String
  date        DateTime @db.Date
  materialId  String
  qtyTon      Decimal  @db.Decimal(12, 3)
  trips       Int?
  owner       String?
  reference   String?
  operation   String   // OperationType enum
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?  // User ID from Clerk

  // Relations
  site     Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  material Material @relation(fields: [materialId], references: [id])

  @@map("dispatches")
}

model ReceivedMaterial {
  id          String   @id @default(cuid())
  siteId      String
  date        DateTime @db.Date
  materialId  String
  qtyTon      Decimal  @db.Decimal(12, 3)
  source      String?
  vehicleRef  String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?  // User ID from Clerk

  // Relations
  site     Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  material Material @relation(fields: [materialId], references: [id])

  @@map("received_materials")
}

model EquipmentLog {
  id          String   @id @default(cuid())
  siteId      String
  date        DateTime @db.Date
  equipmentId String
  hours       Decimal  @db.Decimal(8, 2)
  count       Int      @default(0)
  shift       String?  // ShiftType enum
  status      String?  // EquipmentStatus enum
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?  // User ID from Clerk

  // Relations
  site      Site      @relation(fields: [siteId], references: [id], onDelete: Cascade)
  equipment Equipment @relation(fields: [equipmentId], references: [id])

  @@unique([siteId, date, equipmentId, shift])
  @@map("equipment_logs")
}

model ManpowerLog {
  id          String   @id @default(cuid())
  siteId      String
  date        DateTime @db.Date
  roleId      String
  headcount   Int
  hours       Decimal  @db.Decimal(8, 2)
  shift       String?  // ShiftType enum
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?  // User ID from Clerk

  // Relations
  site Site         @relation(fields: [siteId], references: [id], onDelete: Cascade)
  role ManpowerRole @relation(fields: [roleId], references: [id])

  @@unique([siteId, date, roleId, shift])
  @@map("manpower_logs")
}

model InventorySnapshot {
  id              String   @id @default(cuid())
  siteId          String
  date            DateTime @db.Date
  materialId      String
  openingTon      Decimal  @db.Decimal(12, 3)
  producedTon     Decimal  @db.Decimal(12, 3)
  receivedTon     Decimal  @db.Decimal(12, 3)
  dispatchedTon   Decimal  @db.Decimal(12, 3)
  adjustmentTon   Decimal  @db.Decimal(12, 3) @default(0)
  closingTon      Decimal  @db.Decimal(12, 3)
  isCalculated    Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String?  // User ID from Clerk

  // Relations
  site     Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  material Material @relation(fields: [materialId], references: [id])

  @@unique([siteId, date, materialId])
  @@map("inventory_snapshots")
}

// ============================================================================
// Export & Audit Tables
// ============================================================================

model ExportJob {
  id            String   @id @default(cuid())
  siteId        String
  userId        String   // Clerk user ID
  module        String   // production, dispatch, etc.
  dateFrom      DateTime @db.Date
  dateTo        DateTime @db.Date
  granularity   String   @default("daily")
  format        String   // xlsx, pdf, csv
  status        String   @default("pending") // pending, processing, completed, failed
  progress      Int      @default(0)
  filePath      String?
  fileSize      Int?
  fileHash      String?
  errorMessage  String?
  downloadUrl   String?
  expiresAt     DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)
  audit ExportAudit?

  @@map("export_jobs")
}

model ExportAudit {
  id              String   @id @default(cuid())
  jobId           String   @unique
  siteId          String
  userId          String   // Clerk user ID
  module          String
  filtersJson     String   // JSON serialized filters
  columnPreset    String?
  recordCount     Int
  fileSize        Int
  fileHash        String
  downloadCount   Int      @default(0)
  lastDownload    DateTime?
  createdAt       DateTime @default(now())

  // Relations
  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)
  job  ExportJob @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("export_audits")
}
